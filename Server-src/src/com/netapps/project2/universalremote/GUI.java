package com.netapps.project2.universalremote;

import java.io.IOException;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.util.Enumeration;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.webapp.WebAppContext;


public class GUI extends javax.swing.JFrame
{
    public GUI(){
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Universal Remote Server");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("//========================\nThe \"Get Default Values\" button will attempt to find the correct connection information programatically. Windows and Mac users may have to run \"ipconfig\" or \"ifconfig\" to find the correct IP address to use. ");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.setText("IP Address");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("TCP Port");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setText("UDP Port");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Start Server");
        jToggleButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton1MouseClicked(evt);
            }
        });

        jButton1.setText("Get Default Values");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jToggleButton1))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jToggleButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    // start button mouse click
    private void jToggleButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton1MouseClicked
        port_tcp_ = jTextField2.getText();
        port_udp_ = jTextField3.getText();
        if(!is_started_ && port_udp_.matches("[0-9]{1,5}") 
                && port_tcp_.matches("[0-9]{1,5}")
                && portOpenUDP(Integer.parseInt(port_udp_)) 
                && portOpenTCP(Integer.parseInt(port_tcp_))){
            
            server_ = new Server(Integer.parseInt(jTextField2.getText()));
            WebAppContext context = new WebAppContext();
            jToggleButton1.setText("Stop Server");

            context.setWar("war");
            context.setContextPath("/");
            server_.setHandler(context);

            // starts up the UDP listener
            new UDPListener(Integer.parseInt(jTextField3.getText())).openUDPPort();
            
            // threads and starts the server
            new Thread(new Runnable(){
                @Override
                public void run(){
                    try {
                        server_.start();
                        server_.join();
                    }catch(Exception exc){
                        addLogMessage("ERROR Server Not Started: " + exc.toString());
                    }
                }
            }).start();
            is_started_ = true;
            addLogMessage("The server was started successfully");
        }else if(!is_started_ && (!port_udp_.matches("[0-9]{1,5}") 
                || !port_tcp_.matches("[0-9]{1,5}")
                || portOpenUDP(Integer.parseInt(port_udp_)) 
                || portOpenTCP(Integer.parseInt(port_tcp_)))){
            addLogMessage("The server could not be started, please verify your connection information");
        }else{
            terminate();
        }
    }//GEN-LAST:event_jToggleButton1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    // get default information mouse clicked
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if(!is_started_){
            try{    // loops through all the network interfaces on the machine
                Enumeration e=NetworkInterface.getNetworkInterfaces();
                while(e.hasMoreElements())
                {
                    NetworkInterface n = (NetworkInterface) e.nextElement();
                    Enumeration ee = n.getInetAddresses();
                    if(n.getDisplayName().contains("wlan")  
                            || n.getDisplayName().contains("wireless")){
                        while(ee.hasMoreElements())
                        {
                            InetAddress i = (InetAddress) ee.nextElement();
                            if(i.getHostAddress().contains(".")){
                                server_ip_address_ = i.getHostAddress();
                                break;
                            }
                        }
                    }
                }
            }catch(Exception e){
                addLogMessage("ERROR Failed to get default connection " +
                    "information: " + e.toString());
            }

            // sets the ip field text
            jTextField1.setText(server_ip_address_);
            
            // loops through ports looking for available ones to use for TCP and
            //     UDP, and then sets the field text
            for(int i = 8080; i < 10000; ++i){
                if(portOpenTCP(i)){
                    port_tcp_ = Integer.toString(i);
                    jTextField2.setText(port_tcp_);
                    break;
                }
            }for(int i = 1000; i < 5000; ++i){
                if(portOpenUDP(i)){
                    port_udp_ = Integer.toString(i);
                    jTextField3.setText(port_udp_);
                    break;
                }
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

 
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable(){
            @Override
            public void run(){
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
    
    
    // working variables added outside the NetBeans GUI editor
    public static String server_ip_address_,
                         port_tcp_ = "-1",
                         port_udp_ = "-1";
    private static Server server_;
    private static boolean is_started_ = false;
    
    
    
    //========================================================================//
    //============================Helper Functions============================//
    private void addLogMessage(String msg){
        jTextArea1.setText(jTextArea1.getText() +
                "\n\n//========================\n" + msg);
    }
    
    private void terminate(){
        if(server_ == null)
            System.exit(0);
        else{
            try {
                server_.stop();
                System.exit(0);
            }catch(Exception exc){
                 addLogMessage("ERROR Server was not stopped: " + exc.toString());
            }
            System.exit(1);
        }
    }
    
    private boolean portOpenUDP(int port){
        DatagramSocket d = null;
        try {
            d = new DatagramSocket(port);
            d.setReuseAddress(true);
            return true;
        }catch(IOException e){}
        finally{
            if(d != null)
                d.close();
        }
        return false;
    }
    
    private boolean portOpenTCP(int port){
        ServerSocket s = null;
        try {
            s = new ServerSocket(port);
            s.setReuseAddress(true);
            return true;
        }catch(IOException e){}
        finally{
            if(s != null){
                try {
                    s.close();
                }catch(IOException e){}
            }
        }
        return false;
    }
}
